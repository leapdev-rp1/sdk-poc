{"version":3,"file":"leaphost.cjs.production.min.js","sources":["../src/api/index.ts","../src/impl/config.ts","../src/impl/util.ts","../src/impl/base-impl.ts","../src/impl/desktop/accounting.ts","../src/impl/desktop/app.ts","../src/impl/desktop/calc.ts","../src/impl/desktop/communication.ts","../src/impl/desktop/document.ts","../src/impl/desktop/infotrack.ts","../src/impl/desktop/lawconnect.ts","../src/impl/desktop/matter.ts","../src/impl/desktop/msteams.ts","../src/impl/desktop/register.ts","../src/impl/desktop/schema.ts","../src/impl/desktop/system.ts","../src/impl/desktop/card.ts","../src/impl/desktop/staff.ts","../src/impl/desktop/person.ts","../src/impl/desktop/index.ts","../src/impl/web/config/whitelistdomain.ts","../src/impl/web/accounting.ts","../src/impl/web/app.ts","../src/impl/web/calc.ts","../src/impl/web/communication.ts","../src/impl/web/document.ts","../src/impl/web/infotrack.ts","../src/impl/web/lawconnect.ts","../src/impl/web/matter.ts","../src/impl/web/msteams.ts","../src/impl/web/card.ts","../src/impl/web/staff.ts","../src/impl/web/register.ts","../src/impl/web/schema.ts","../src/impl/web/system.ts","../src/impl/web/person.ts","../src/impl/web/index.ts","../src/impl/index.ts"],"sourcesContent":["import { calc } from './calc';\nimport { card } from '././card';\nimport { communication } from './communication';\nimport { document } from './document';\nimport { lawconnect } from './lawconnect';\nimport { matter } from './matter';\nimport { msteams } from './msteams';\nimport { system } from './system';\nimport { app } from './app';\nimport { infotrack } from './infotrack';\nimport { accounting } from './accounting';\nimport { person } from './person';\nimport { register } from './register';\nimport { schema } from './schema';\nimport { staff } from './staff';\n\nexport interface BaseRequest {\n  appSessionId?: string;\n  close?: boolean;\n}\n\nexport interface MatterBasedRequest extends BaseRequest {\n  matterId: string;\n}\n\nexport interface HostResponse {\n  isSuccess: boolean;\n  error: string;\n  data: any;\n}\n\nexport type MatterContext = {\n  matterId: string;\n  [key: string]: any;\n};\n\nexport type CardContext = {\n  cardId: string;\n  [key: string]: any;\n};\n\nexport type PersonContext = {\n  personId: string;\n  [key: string]: any;\n};\n\nexport interface RequestContext {\n  appSessionId: string; // leap-app session id - used for validation and host resource mapping\n  host: string; // web, reporting, android, apple (4D by default)\n  env: string; // dev, test, live\n  region: string; // au, us, uk\n  trustedApp?: boolean; // true for internal trusted applications\n  newTab?: boolean; // true for opening on new tab\n}\n\nexport class LeapContext {\n  constructor(readonly context: MatterContext | CardContext | PersonContext, readonly hostInfo: HostInfo) {}\n}\n\nexport class HostInfo {\n  constructor(\n    readonly appSessionId: string,\n    readonly hostType: string,\n    readonly hostVersion: string,\n    readonly env: string,\n    readonly region: string\n  ) {}\n}\n\nexport interface Api {\n  accounting: accounting.Api;\n  app: app.Api;\n  calc: calc.Api;\n  communication: communication.Api;\n  document: document.Api;\n  infotrack: infotrack.Api;\n  lawconnect: lawconnect.Api;\n  matter: matter.Api;\n  msteams: msteams.Api;\n  person: person.Api;\n  register: register.Api;\n  schema: schema.Api;\n  system: system.Api;\n  card: card.Api;\n  staff: staff.Api;\n\n  leapContext: LeapContext;\n\n  init(leapAuthClientId?: string): Promise<void>;\n  getRefreshedAccessToken(): Promise<string>;\n  getDecodedRefreshedAccessToken(): Promise<any>;\n  registerHostMessageHandler(command: string, callback?: (param?: any) => void): void;\n  deregisterHostMessageHandler(command: string): void;\n}\n","let config = {\n  auth: {\n    host: {\n      dev: {\n        au: 'https://auth.dev.leap.services',\n      },\n      test: {\n        au: 'https://login.test.leap365.com.au',\n        uk: 'https://login.test.leap365.co.uk',\n        us: 'https://login.test.leap365.com',\n        ca: 'https://login.test.leap365.ca',\n      },\n      live: {\n        au: 'https://login.leap365.com.au',\n        uk: 'https://login.leap365.co.uk',\n        us: 'https://login.leap365.com',\n        ca: 'https://login.leap365.ca',\n      },\n    },\n  },\n};\n\nexport { config };\n","/**\n * Returns the value of a query string paramter of the current url if exists, undefined otherwise.\n * @param key The name of the parameter\n * @returns The value or undefined\n */\nexport function getQueryStringValue(key: string, searchInHash: boolean = false): string {\n  let result = undefined;\n  const locationSection = searchInHash ? window.location.hash : window.location.search;\n\n  if (locationSection && locationSection.length > 1) {\n    const keyValues = locationSection.substring(1).split('&');\n    let i = 0;\n    while (result === undefined && i < keyValues.length) {\n      let split = keyValues[i].split('=');\n      if (split.length === 2 && split[0] === key) result = split[1];\n      i++;\n    }\n  }\n\n  return result;\n}\n\nexport function addMinutes(date, minutes) {\n  return new Date(date.getTime() + minutes * 60000);\n}\n\n/**\n * Decodes a JWT token\n * @param token The JWT token\n * @returns The decoded token\n */\nexport function decodeToken(token: string): any {\n  if (!token) return undefined;\n  try {\n    const payload = token.split('.')[1];\n    return JSON.parse(atob(payload));\n  } catch (e) {\n    return undefined;\n  }\n}\n","import {\n  Api,\n  LeapContext,\n  HostResponse,\n  RequestContext,\n  MatterContext,\n  HostInfo,\n  CardContext,\n  PersonContext,\n} from '../api';\nimport { app } from '../api/app';\nimport { calc } from '../api/calc';\nimport { communication } from '../api/communication';\nimport { document } from '../api/document';\nimport { infotrack } from '../api/infotrack';\nimport { lawconnect } from '../api/lawconnect';\nimport { matter } from '../api/matter';\nimport { msteams } from '../api/msteams';\nimport { system } from '../api/system';\nimport { accounting } from '../api/accounting';\nimport { register } from '../api/register';\nimport { schema } from '../api/schema';\nimport { v4 as uuidv4 } from 'uuid';\nimport { config } from './config';\nimport { card } from 'api/card';\nimport { staff } from 'api/staff';\nimport { person } from 'api/person';\nimport { AuthAgent } from '@leapdev/auth-agent/src/index.umd';\nimport { decodeToken, getQueryStringValue } from './util';\n\nexport abstract class BaseApi implements Api {\n  abstract get accounting(): accounting.Api;\n  abstract get app(): app.Api;\n  abstract get calc(): calc.Api;\n  abstract get card(): card.Api;\n  abstract get communication(): communication.Api;\n  abstract get document(): document.Api;\n  abstract get infotrack(): infotrack.Api;\n  abstract get lawconnect(): lawconnect.Api;\n  abstract get staff(): staff.Api;\n  abstract get msteams(): msteams.Api;\n  abstract get person(): person.Api;\n  abstract get register(): register.Api;\n  abstract get schema(): schema.Api;\n  abstract get matter(): matter.Api;\n  abstract get system(): system.Api;\n\n  protected _leapContext: LeapContext;\n  protected _isTrustedApp: boolean;\n\n  private registeredCommands: { [command: string]: (params?: any) => void };\n  private _userToken: string; //TODO: remove when LD2.4 is the minimum version\n\n  constructor(requestContext: RequestContext) {\n    this.registeredCommands = {};\n\n    const hostInfo = new HostInfo(\n      requestContext.appSessionId,\n      requestContext.host,\n      null,\n      requestContext.env,\n      requestContext.region\n    );\n    this._leapContext = new LeapContext(undefined, hostInfo);\n    this._isTrustedApp = !!requestContext.trustedApp;\n  }\n\n  get leapContext(): LeapContext {\n    return this._leapContext;\n  }\n\n  public get isTrustedApp(): boolean {\n    return this._isTrustedApp;\n  }\n\n  public init(leapAuthClientId?: string): Promise<void> {\n    //close the window if the user doesn't accept the permissions\n    const errMsg = getQueryStringValue('error');\n    if (errMsg === 'access_denied') this.system.close();\n\n    return new Promise((resolve, reject) => {\n      this.registerHostMessageHandler(\n        this.leapContext.hostInfo.appSessionId,\n        ({ data: leapContext }: leapContextResponse) => {\n          this.deregisterHostMessageHandler(this.leapContext.hostInfo.appSessionId);\n          const leapContextObj = {\n            context: leapContext.context,\n            hostInfo: this.leapContext.hostInfo,\n          };\n\n          if (!leapContext.context || (Object.keys(leapContext.context).length === 0 && !!leapContext.matterContext)) {\n            leapContextObj.context = leapContext.matterContext;\n          }\n\n          let clientId = leapAuthClientId;\n\n          //host info, available from LD2.4\n          if (!!leapContext.hostInfo) {\n            this._isTrustedApp = leapContext.isTrustedApp;\n\n            leapContextObj.hostInfo = new HostInfo(\n              this.leapContext.hostInfo.appSessionId,\n              leapContext.hostInfo.hostType,\n              leapContext.hostInfo.hostVersion,\n              leapContext.hostInfo.env,\n              leapContext.hostInfo.region\n            );\n\n            if (!this.isTrustedApp) {\n              //use clientId from the schema for non-trusted apps\n              if (!!leapContext.clientId) {\n                clientId = leapContext.clientId;\n              } else {\n                return reject('Failed to load the clientId from the schema');\n              }\n            } else {\n              //trusted apps don't need clientId\n              this._leapContext = new LeapContext(leapContextObj.context, leapContextObj.hostInfo);\n              this.hostRelatedSetup();\n              return resolve();\n            }\n          } else {\n            if (this.isTrustedApp) {\n              //TODO: remove when 2.4 is the minimum version\n              this._userToken = leapContext.authtoken;\n              this._leapContext = new LeapContext(leapContextObj.context, leapContextObj.hostInfo);\n              this.hostRelatedSetup();\n              return resolve();\n            }\n          }\n\n          this._leapContext = new LeapContext(leapContextObj.context, leapContextObj.hostInfo);\n          this.hostRelatedSetup();\n\n          const authEnv = leapContextObj.hostInfo.env.includes('live') ? 'live' : leapContextObj.hostInfo.env;\n          const authHost = config.auth.host[authEnv][leapContextObj.hostInfo.region];\n\n          AuthAgent.init({\n            authHost: authHost,\n            clientId: clientId,\n            autoLogin: true,\n            autoLogout: false,\n            uniqueSession: false,\n            scopes: [], //AUTH-218, defaults to defaultScopes for marketplace apps\n            autoRefreshToken: false,\n          }).then((accessToken: string) => {\n            return resolve();\n          });\n        }\n      );\n      this.retrieveContext();\n    });\n  }\n\n  public async getRefreshedAccessToken(): Promise<string> {\n    if (this.isTrustedApp) {\n      if (!!this.leapContext.hostInfo.hostVersion) {\n        //fall back to the default userToken if this command has not been implemented yet\n        return this.system.send({ command: 'internal.getAccessToken' }, true) ?? this._userToken;\n      } else {\n        //TODO: remove when LD2.4 is the minimum version\n        //only LD2.3 does not have the value for \"hostVersion\"\n        return this._userToken;\n      }\n    }\n    return AuthAgent.getRefreshedAccessToken();\n  }\n\n  public async getDecodedRefreshedAccessToken(): Promise<any> {\n    const accessToken = await this.getRefreshedAccessToken();\n    return decodeToken(accessToken);\n  }\n\n  protected abstract retrieveContext(): void;\n  protected abstract hostRelatedSetup(): void;\n\n  public registerHostMessageHandler(command: string, callback?: (param?: any) => void) {\n    const alreadyRegistered = !!this.registeredCommands[command];\n\n    if (!alreadyRegistered) {\n      this.registeredCommands[command] = callback;\n    } else {\n      throw new Error('Command already registered');\n    }\n  }\n\n  public deregisterHostMessageHandler(command: string) {\n    delete this.registeredCommands[command];\n  }\n\n  /**\n   * A helper function that makes 2-way call easier. It takes care of registering and deregistering message handler for you.\n   * @param request the actual request object from LEAP app\n   * @param requestFn a function specifying how a request object should be sent to the host system. It passes the requestId as parameter so that the request function can attach it to the request object.\n   * @param responseFn a function specifying how a raw response from the host system should be handled / transformed\n   * @return a promise of the final response\n   */\n  public twoWayCall<I, O>(\n    request: I,\n    requestFn: (requestId: string, request: I) => void,\n    responseFn: (response: any) => O\n  ): Promise<O> {\n    const requestId = uuidv4();\n    return new Promise((resolve, reject) => {\n      this.registerHostMessageHandler(requestId, (hostResponse: HostResponse) => {\n        this.deregisterHostMessageHandler(requestId);\n        if (hostResponse.isSuccess) {\n          resolve(responseFn(hostResponse.data));\n        } else {\n          reject(new Error(hostResponse.error));\n        }\n      });\n      requestFn(requestId, request);\n    });\n  }\n\n  protected handleCommand(command: string, payload?: string) {\n    const registeredCommand = this.registeredCommands[command];\n\n    if (!!registeredCommand && !!payload) {\n      const params = JSON.parse(payload);\n      registeredCommand(params);\n    } else if (!!registeredCommand) {\n      registeredCommand();\n    } else {\n      throw new Error('Host command not registered');\n    }\n  }\n}\n\ninterface leapContextResponse {\n  isSuccess: boolean;\n  data: leapContextInternal;\n}\n\ninterface leapContextInternal {\n  authtoken: string; //TODO: remove when 2.4 is the minimum version\n  isTrustedApp: boolean;\n  clientId: string;\n  apiKey: string;\n  context: any;\n  matterContext: any; //deprecated, leave here for backwards compatible\n  hostInfo: HostInfo;\n}\n","import { accounting } from '../../api/accounting';\nimport { BrowserFourdApi } from '.';\nimport { MatterBasedRequest } from '../../api/.';\n\nexport class Accounting implements accounting.Api {\n  constructor(private fourd: BrowserFourdApi) {}\n\n  createTimeEntry(request: accounting.CreateTimeEntryRequest): void {\n    this.fourd.call4Dv2('accounting.createTimeEntry', request);\n  }\n\n  createFeeEntry(request: accounting.CreateFeeEntryRequest): void {\n    this.fourd.call4Dv2('accounting.createFeeEntry', request);\n  }\n\n  createCostRecovery(request: accounting.CreateCostRecoveryEntryRequest): void {\n    this.fourd.call4Dv2('accounting.createCostRecovery', request);\n  }\n\n  createInvoice(request: accounting.CreateInvoiceRequest): Promise<boolean> {\n    return this.fourd.twoWayCall<accounting.CreateInvoiceRequest, boolean>(\n      request,\n      (requestId, request) => {\n        this.fourd.call4Dv2('accounting.createInvoice', request, requestId);\n      },\n      (response) => {\n        return true; // TODO: check the actual response\n      }\n    );\n  }\n\n  createOfficeReceipt(request: accounting.CreateOfficeReceiptRequest): void {\n    this.fourd.call4Dv2('accounting.createOfficeReceipt', request);\n  }\n\n  createOfficePayment(request: accounting.CreateOfficePaymentRequest): void {\n    this.fourd.call4Dv2('accounting.createOfficePayment', request);\n  }\n\n  createOfficeJournal(request: accounting.CreateOfficeJournalRequest): void {\n    this.fourd.call4Dv2('accounting.createOfficeJournal', request);\n  }\n\n  createTrustReceipt(request: accounting.CreateTrustReceiptRequest): void {\n    this.fourd.call4Dv2('accounting.createTrustReceipt', request);\n  }\n\n  createTrustPayment(request: accounting.CreateTrustPaymentRequest): void {\n    this.fourd.call4Dv2('accounting.createTrustPayment', request);\n  }\n\n  createTrustJournal(request: accounting.CreateTrustJournalRequest): void {\n    this.fourd.call4Dv2('accounting.createTrustJournal', request);\n  }\n\n  createTrustToOffice(request: accounting.CreateTrustToOfficeRequest): void {\n    this.fourd.call4Dv2('accounting.createTrustToOffice', request);\n  }\n  createOfficePaymentRequest(request: accounting.CreateNewOfficePaymentRequestRequest): void {\n    this.fourd.call4Dv2('accounting.createOfficePaymentRequest', request);\n  }\n\n  createTrustPaymentRequest(request: accounting.CreateNewTrustPaymentRequestRequest): void {\n    this.fourd.call4Dv2('accounting.createTrustPaymentRequest', request);\n  }\n\n  reloadFinancialSummary(request: accounting.ReloadFinancialSummaryRequest): void {\n    this.fourd.call4Dv2('accounting.reloadFinancialSummary', request);\n  }\n\n  reloadTimeFeeList(request: accounting.ReloadTimeFeeListRequest): void {\n    this.fourd.call4Dv2('accounting.reloadTimeFeeList', request);\n  }\n\n  reloadOfficeLedger(request: accounting.ReloadOfficeLedgerRequest): void {\n    this.fourd.call4Dv2('accounting.reloadOfficeLedger', request);\n  }\n\n  reloadAnticipatedPaymentList(request: accounting.ReloadAnticipatedPaymentListRequest): void {\n    this.fourd.call4Dv2('accounting.reloadAnticipatedPaymentList', request);\n  }\n\n  reloadCostRecoveryList(request: accounting.ReloadCostRecoveryListRequest): void {\n    this.fourd.call4Dv2('accounting.reloadCostRecoveryList', request);\n  }\n\n  reloadTrustLedger(request: accounting.ReloadTrustLedgerRequest): void {\n    this.fourd.call4Dv2('accounting.reloadTrustLedger', request);\n  }\n\n  reloadControlledMoneyList(request: accounting.ReloadControlledMoneyListRequest): void {\n    this.fourd.call4Dv2('accounting.reloadControlledMoneyList', request);\n  }\n\n  reloadPowerMoneyList(request: accounting.ReloadPowerMoneyListRequest): void {\n    this.fourd.call4Dv2('accounting.reloadPowerMoneyList', request);\n  }\n\n  reloadTransitMoneyList(request: accounting.ReloadTransitMoneyListRequest): void {\n    this.fourd.call4Dv2('accounting.reloadTransitMoneyList', request);\n  }\n\n  openFee(request: accounting.OpenFeeRequest): void {\n    if (request.isAutoTime) request.timed = true;\n\n    this.fourd.call4Dv2('accounting.openFee', request);\n  }\n}\n","import { app } from '../../api/app';\nimport { BrowserFourdApi } from '.';\n\nexport class App implements app.Api {\n  constructor(private fourd: BrowserFourdApi) {}\n\n  openApp(request: app.OpenAppRequest): void {\n    this.fourd.call4Dv2('app.openApp', request);\n  }\n}\n","import { calc } from '../../api/calc';\nimport { BrowserFourdApi } from './index';\n\nexport class Calc implements calc.Api {\n  constructor(private fourd: BrowserFourdApi) {}\n\n  evaluatePaths(request: calc.EvaluatePathsRequest): Promise<calc.PathResult[]> {\n    return this.fourd.twoWayCall<calc.EvaluatePathsRequest, calc.PathResult[]>(\n      request,\n      (requestId, request) => {\n        const calcRequest = {\n          method: 'POST',\n          url: '/api/evaluate/paths',\n          body: request,\n        };\n        this.fourd.call4Dv2('calc.evaluatePaths', calcRequest, requestId);\n      },\n      (response) => {\n        if (response.status >= 400) {\n          throw new Error(JSON.parse(response.body).message);\n        } else {\n          let responseData;\n          try {\n            responseData = JSON.parse(response.body);\n          } catch (e) {\n            // Unable to parse response.body => response.body is not a stringify object\n            responseData = response.body;\n          }\n          return responseData;\n        }\n      }\n    );\n  }\n}\n","import { communication } from '../../api/communication';\nimport { BrowserFourdApi } from '.';\n\nexport class Communication implements communication.Api {\n  constructor(private fourd: BrowserFourdApi) {}\n\n  composeEmail(request: communication.CreateEmailRequest): void {\n    this.fourd.call4Dv2('communication.composeEmail', request);\n  }\n\n  createAppointment(request: communication.CreateAppointmentRequest): void {\n    this.fourd.call4Dv2('communication.createAppointment', request);\n  }\n\n  createTask(request: communication.CreateTaskRequest): void {\n    this.fourd.call4Dv2('communication.createTask', request);\n  }\n}\n","import { document } from '../../api/document';\nimport { BrowserFourdApi } from '.';\n\nexport class Document implements document.Api {\n  constructor(private fourd: BrowserFourdApi) {}\n\n  previewDocument(request: document.PreviewDocumentRequest): void {\n    this.fourd.call4Dv2('document.previewDocument', request);\n  }\n\n  previewPrecedent(request: document.PreviewPrecedentRequest): void {\n    this.fourd.call4Dv2('document.previewPrecedent', request);\n  }\n\n  createDocumentFromContainer(request: document.CreateDocumentFromContainerRequest): void {\n    this.fourd.call4Dv2('document.createDocumentFromContainer', request);\n  }\n\n  createDocumentFromPrecedent(request: document.CreateDocumentFromPrecedentRequest): void {\n    this.fourd.call4Dv2('document.createDocumentFromPrecedent', request);\n  }\n\n  openDocument(request: document.OpenDocumentRequest): void {\n    this.fourd.call4Dv2('document.openDocument', request);\n  }\n\n  reloadDocumentList(request: document.ReloadDocumentListRequest): void {\n    this.fourd.call4Dv2('document.reloadDocumentList', request);\n  }\n\n  editPrecedent(request: document.EditPrecedentRequest): void {\n    this.fourd.call4Dv2('document.editPrecedent', request);\n  }\n\n  selectPrecedent(request: document.SelectPrecedentRequest): Promise<document.SelectPrecedentResponse> {\n    return this.fourd.twoWayCall<document.SelectPrecedentRequest, document.SelectPrecedentResponse>(\n      request,\n      (requestId, request) => {\n        this.fourd.call4Dv2('document.selectPrecedent', request, requestId);\n      },\n      (response) => response\n    );\n  }\n}\n","import { infotrack } from '../../api/infotrack';\nimport { BrowserFourdApi } from '.';\n\nexport class Infotrack implements infotrack.Api {\n  constructor(private fourd: BrowserFourdApi) {}\n\n  orderSearch(request: infotrack.CreateSearchRequest): void {\n    this.fourd.call4Dv2('infotrack.orderSearch', request);\n  }\n}\n","import { lawconnect } from '../../api/lawconnect';\nimport { BrowserFourdApi } from '.';\n\nexport class LawConnect implements lawconnect.Api {\n  constructor(private fourd: BrowserFourdApi) {}\n\n  shareDocuments(request: lawconnect.ShareDocumentsRequest): void {\n    this.fourd.call4Dv2('lawconnect.shareDocuments', request);\n  }\n\n  shareFolder(request: lawconnect.ShareFolderRequest): void {\n    this.fourd.call4Dv2('lawconnect.shareFolder', request);\n  }\n\n  shareOfficeStatement(request: lawconnect.ShareOfficeStatementRequest): void {\n    this.fourd.call4Dv2('lawconnect.shareOfficeStatement', request);\n  }\n\n  shareTrustStatement(request: lawconnect.ShareTrustStatementRequest): void {\n    this.fourd.call4Dv2('lawconnect.shareTrustStatement', request);\n  }\n}\n","import { matter } from '../../api/matter';\nimport { BrowserFourdApi } from '.';\nimport { BaseRequest } from 'api';\n\nexport class Matter implements matter.Api {\n  constructor(private fourd: BrowserFourdApi) {}\n\n  openTable(request: matter.OpenTableRequest): void {\n    if (request == null) {\n      request.order = 1;\n    }\n    this.fourd.call4Dv2('matter.openTable', request);\n  }\n\n  openMatter(request: matter.OpenMatterRequest): void {\n    this.fourd.call4Dv2('matter.openMatter', request);\n  }\n\n  selectMatter(request?: matter.SelectMatterRequest): Promise<matter.Matter[]> {\n    return this.fourd.twoWayCall<matter.SelectMatterRequest, matter.Matter[]>(\n      request,\n      (requestId, request) => {\n        this.fourd.call4Dv2('matter.selectMatter', request, requestId);\n      },\n      (response) => {\n        if (\n          !this.fourd.leapContext?.hostInfo?.hostVersion ||\n          this.fourd.leapContext.hostInfo.hostVersion < '2.4.280.0'\n        ) {\n          //HSDK-122, fix the incorrect property names, can be removed when minimum version is 2.4\n          return response.map((r) => {\n            const matter = { ...r, deleted: r.delete, matterTypeId: '' };\n            delete matter.delete;\n\n            return matter;\n          });\n        }\n\n        return response;\n      }\n    );\n  }\n\n  // getLists(request: BaseRequest): Promise<matter.MatterResult[]> {\n  //   return this.fourd.twoWayCall<BaseRequest, matter.MatterResult[]>(\n  //     request,\n  //     (requestId, request) => {\n  //       this.fourd.call4Dv2('matter.getLists', request, requestId);\n  //     },\n  //     (response) => {\n  //       let responseData;\n  //       try {\n  //         responseData = JSON.parse(response.body);\n  //       } catch (e) {\n  //         // Unable to parse response => response is not a stringify object\n  //         responseData = response;\n  //       }\n  //       return responseData;\n  //     }\n  //   );\n  // }\n}\n","import { msteams } from '../../api/msteams';\nimport { BrowserFourdApi } from '.';\n\nexport class MsTeams implements msteams.Api {\n  constructor(private fourd: BrowserFourdApi) {}\n\n  shareDocument(request: msteams.ShareDocumentRequest): void {\n    this.fourd.call4Dv2('msteams.shareDocument', request);\n  }\n\n  shareMatter(request: msteams.ShareMatterRequest): void {\n    this.fourd.call4Dv2('msteams.shareMatter', request);\n  }\n\n  requestCallback(request: msteams.RequestCallbackRequest): void {\n    this.fourd.call4Dv2('msteams.requestCallback', request);\n  }\n}\n","import { register } from '../../api/register';\nimport { BrowserFourdApi } from '.';\n\nexport class Register implements register.Api {\n  constructor(private fourd: BrowserFourdApi) {}\n\n  reloadDocumentRegisterList(request: register.ReloadDocumentRegisterListRequest): void {\n    this.fourd.call4Dv2('register.reloadDocumentRegisterList', request);\n  }\n  reloadPowerEstateList(request: register.ReloadPowerEstateListRequest): void {\n    this.fourd.call4Dv2('register.reloadPowerEstateList', request);\n  }\n}\n","import { BrowserFourdApi } from '.';\nimport { schema } from '../../api/schema';\n\nexport class Schema implements schema.Api {\n  constructor(private fourd: BrowserFourdApi) {}\n\n  customiseList(request: schema.CustomiseListRequest): Promise<schema.CustomiseListResponse> {\n    return this.fourd.twoWayCall<schema.CustomiseListRequest, schema.CustomiseListResponse>(\n      request,\n      (requestId, request) => {\n        this.fourd.call4Dv2('schema.customiseList', request, requestId);\n      },\n      (response) => {\n        return response;\n      }\n    );\n  }\n\n  getLists(request: schema.GetListsRequest): Promise<schema.SchemaResponse<schema.SchemaList[]>> {\n    return this.fourd.twoWayCall<schema.GetListsRequest, schema.SchemaResponse<schema.SchemaList[]>>(\n      request,\n      (requestId, request) => {\n        this.fourd.call4Dv2('schema.getLists', request, requestId);\n      },\n      (response) => {\n        return response;\n      }\n    );\n  }\n}\n","import { system } from '../../api/system';\nimport { BrowserFourdApi } from '.';\nimport { BaseRequest } from '../../api';\n\nexport class System implements system.Api {\n  private _systemInfo: system.SystemInfo;\n\n  constructor(private fourd: BrowserFourdApi) {}\n\n  openTwitter(request: BaseRequest): void {\n    this.fourd.call4Dv2('system.openTwitter', request);\n  }\n\n  close(): void {\n    this.fourd.call4Dv2('system.close');\n  }\n\n  hide(): void {\n    this.fourd.call4Dv2('system.hide');\n  }\n\n  wait(request?: system.MessageRequest): void {\n    this.fourd.call4Dv2('system.wait', request);\n  }\n\n  resume(): void {\n    this.fourd.call4Dv2('system.resume');\n  }\n\n  cancelClose(): void {\n    this.fourd.call4Dv2('system.cancelClose');\n  }\n\n  alert(request: system.MessageRequest): void {\n    if (!this.isString(request.message) || !request.message) {\n      return;\n    }\n    this.fourd.call4Dv2('system.alert', request);\n  }\n\n  error(request: system.MessageRequest): void {\n    if (!this.isString(request.message) || !request.message) {\n      return;\n    }\n    this.fourd.call4Dv2('system.error', request);\n  }\n\n  openDialog(request: system.DialogRequest): Promise<boolean> {\n    if (!this.isString(request.message) || !request.message) {\n      throw new Error('Invalid value in message');\n    } else if (!request.dialogType) {\n      throw new Error('DialogType cannot be null');\n    }\n\n    return this.fourd.twoWayCall<system.DialogRequest, boolean>(\n      request,\n      (requestId, request) => {\n        this.fourd.call4Dv2('system.openDialog', request, requestId);\n      },\n      (response) => {\n        return response;\n      }\n    );\n  }\n\n  openUrl(config: system.BrowserConfig): void {\n    config['action'] = 'OpenURL';\n    this.fourd.call4Dv2('system.openUrl', config);\n  }\n\n  getSystemInfo(): Promise<system.SystemInfo> {\n    if (this._systemInfo) {\n      return Promise.resolve(this._systemInfo);\n    }\n    return this.fourd.twoWayCall<system.SystemInfo, system.SystemInfo>(\n      null,\n      (requestId, request) => {\n        this.fourd.call4Dv2('system.getSystemInfo', request, requestId);\n      },\n      (response) => {\n        this._systemInfo = response;\n        return response;\n      }\n    );\n  }\n\n  setWindowTitle(request: system.SetWindowTitleRequest) {\n    this.fourd.call4Dv2('system.setWindowTitle', request);\n  }\n\n  onBeforeClose(handler: () => Promise<boolean>): void {\n    handler().then((shouldCancelClose) => {\n      if (shouldCancelClose) {\n        this.cancelClose();\n      }\n    });\n  }\n\n  async send(request: any, hasResponse: boolean = false): Promise<any> {\n    if (!this.fourd.isTrustedApp) {\n      throw new Error('Permission error');\n    }\n\n    if (request === null || request === undefined) {\n      throw new Error('Bad request');\n    }\n\n    const isObject = typeof request === 'object';\n\n    // Proxy generic command use case\n    if (isObject && request['command']) {\n      if (hasResponse) {\n        return this.fourd.twoWayCall<any, any>(\n          request,\n          (requestId, request) => {\n            this.fourd.call4Dv2(request['command'], request['request'], requestId);\n          },\n          (response) => {\n            return response;\n          }\n        );\n      } else {\n        this.fourd.call4Dv2(request['command'], request['request']);\n        return Promise.resolve();\n      }\n    }\n\n    // For strings and SDK 1.0 commands\n    if (hasResponse) {\n      return this.fourd.twoWayCall<any, any>(\n        request,\n        (requestId, request) => {\n          this.fourd.call4Dv2('system.send', request, requestId);\n        },\n        (response) => {\n          return response;\n        }\n      );\n    } else {\n      this.fourd.call4Dv2('system.send', request);\n      return Promise.resolve();\n    }\n  }\n\n  // Legacy versions - Do not wrap request object in v2 format (LSDK-81)\n  private sendLegacy(request: any): Promise<any> {\n    const isObject = typeof request === 'object';\n    if (!isObject || !request['requestId']) {\n      this.fourd.call4D(this.fourd.to4DJSONString(request));\n      return Promise.resolve();\n    } else {\n      return new Promise<any>((resolve, reject) => {\n        this.fourd.registerHostMessageHandler(request['requestId'], (response) => {\n          this.fourd.deregisterHostMessageHandler(request['requestId']);\n          // Some handlers of 2.1 and 2.2 respond in v2 format\n          if (typeof response === 'object' && !!response) {\n            const hasStatus = response.hasOwnProperty('isSuccess');\n            const hasError = response.hasOwnProperty('error');\n            const hasData = response.hasOwnProperty('data');\n            if (hasStatus && (hasError || hasData)) {\n              if (response['isSuccess']) {\n                resolve(response['data']);\n              } else {\n                reject(new Error(response['error']));\n              }\n            }\n          } else {\n            resolve(response);\n          }\n        });\n        this.fourd.call4D(this.fourd.to4DJSONString(request));\n      });\n    }\n  }\n\n  finishLoading(): void {\n    this.fourd.call4Dv2('system.finishLoading');\n  }\n\n  private isString = (value: any) => {\n    return typeof value === 'string' || value instanceof String;\n  };\n}\n","import { card } from '../../api/card';\nimport { BrowserFourdApi } from '.';\nimport { BaseRequest } from 'api';\n\nexport class Card implements card.Api {\n  constructor(private fourd: BrowserFourdApi) {}\n\n  selectCard(request?: card.SelectCardRequest): Promise<card.Card[]> {\n    return this.fourd.twoWayCall<card.SelectCardRequest, card.Card[]>(\n      request,\n      (requestId, request) => {\n        this.fourd.call4Dv2('card.selectCard', request, requestId);\n      },\n      (response) => {\n        let responseData;\n        try {\n          responseData = JSON.parse(response);\n        } catch (e) {\n          responseData = response;\n        }\n        return responseData;\n      }\n    );\n  }\n\n  createCard(): Promise<card.CreatedCard> {\n    return this.fourd.twoWayCall<any, card.CreatedCard>(\n      null,\n      (requestId, request) => {\n        this.fourd.call4Dv2('card.createCard', request, requestId);\n      },\n      (response) => {\n        let responseData;\n        try {\n          responseData = JSON.parse(response);\n        } catch (e) {\n          responseData = response;\n        }\n        return responseData;\n      }\n    );\n  }\n\n  openCard(request: card.OpenCardRequest): void {\n    this.fourd.call4Dv2('card.openCard', request);\n  }\n\n  //   getLists(request: BaseRequest): Promise<card.Card[]> {\n  //     return this.fourd.twoWayCall<BaseRequest, card.Card[]>(\n  //       request,\n  //       (requestId, request) => {\n  //         this.fourd.call4Dv2('card.getLists', request, requestId);\n  //       },\n  //       (response) => {\n  //         let responseData;\n  //         try {\n  //           responseData = JSON.parse(response);\n  //         } catch (e) {\n  //           // Unable to parse response.body => response.body is not a stringify object\n  //           responseData = response;\n  //         }\n  //         return responseData;\n  //       }\n  //     );\n  //   }\n}\n","import { staff } from '../../api/staff';\nimport { BrowserFourdApi } from '.';\nimport { BaseRequest } from 'api';\n\nexport class Staff implements staff.Api {\n  constructor(private fourd: BrowserFourdApi) {}\n\n  selectStaff(request?: staff.SelectStaffRequest): Promise<staff.Staff[]> {\n    return this.fourd.twoWayCall<staff.SelectStaffRequest, staff.Staff[]>(\n      request,\n      (requestId, request) => {\n        this.fourd.call4Dv2('staff.selectStaff', request, requestId);\n      },\n      (response) => {\n        if (\n          !this.fourd.leapContext?.hostInfo?.hostVersion ||\n          this.fourd.leapContext.hostInfo.hostVersion < '2.4.280.0'\n        ) {\n          //HSDK-122, fix the incorrect property names, can be removed when minimum version is 2.4\n          return response.map((r) => {\n            const staff = { ...r, staffId: r.staffGUID, userId: r.userGUID, branchId: r.branchGUID };\n            delete staff.staffGUID;\n            delete staff.userGUID;\n            delete staff.branchGUID;\n\n            return staff;\n          });\n        }\n        return response;\n      }\n    );\n  }\n\n  // getLists(request: BaseRequest): Promise<staff.Staff[]> {\n  //   return this.fourd.twoWayCall<BaseRequest, staff.Staff[]>(\n  //     request,\n  //     (requestId, request) => {\n  //       this.fourd.call4Dv2('staff.getLists', request, requestId);\n  //     },\n  //     (response) => {\n  //       let responseData;\n  //       try {\n  //         responseData = JSON.parse(response);\n  //       } catch (e) {\n  //         // Unable to parse response.body => response.body is not a stringify object\n  //         responseData = response;\n  //       }\n  //       return responseData;\n  //     }\n  //   );\n  // }\n}\n","import { person } from '../../api/person';\nimport { BrowserFourdApi } from '.';\n\nexport class Person implements person.Api {\n  constructor(private fourd: BrowserFourdApi) {}\n\n  selectPerson(request?: person.SelectPersonRequest): Promise<person.Person[]> {\n    return this.fourd.twoWayCall<person.SelectPersonRequest, person.Person[]>(\n      request,\n      (requestId, request) => {\n        this.fourd.call4Dv2('person.selectPerson', request, requestId);\n      },\n      (response) => {\n        let responseData;\n        try {\n          responseData = JSON.parse(response);\n        } catch (e) {\n          // Unable to parse response.body => response.body is not a stringify object\n          responseData = response;\n        }\n        return responseData;\n      }\n    );\n  }\n\n  openPerson(request: person.OpenPersonRequest): void {\n    this.fourd.call4Dv2('person.openPerson', request);\n  }\n\n  //   getLists(request: BaseRequest): Promise<person.Person[]> {\n  //     return this.fourd.twoWayCall<BaseRequest, person.Person[]>(\n  //       request,\n  //       (requestId, request) => {\n  //         this.fourd.call4Dv2('person.getLists', request, requestId);\n  //       },\n  //       (response) => {\n  //         let responseData;\n  //         try {\n  //           responseData = JSON.parse(response);\n  //         } catch (e) {\n  //           // Unable to parse response.body => response.body is not a stringify object\n  //           responseData = response;\n  //         }\n  //         return responseData;\n  //       }\n  //     );\n  //   }\n}\n","import { BaseApi } from '../base-impl';\nimport { RequestContext } from '../../api';\nimport { app } from '../../api/app';\nimport { calc } from '../../api/calc';\nimport { communication } from '../../api/communication';\nimport { document } from '../../api/document';\nimport { infotrack } from '../../api/infotrack';\nimport { lawconnect } from '../../api/lawconnect';\nimport { matter } from '../../api/matter';\nimport { msteams } from '../../api/msteams';\nimport { register } from '../../api/register';\nimport { system } from '../../api/system';\nimport { accounting } from '../../api/accounting';\nimport { schema } from '../../api/schema';\nimport { card } from '../../api/card';\nimport { staff } from '../../api/staff';\nimport { person } from '../../api/person';\n\nimport { Accounting } from './accounting';\nimport { App } from './app';\nimport { Calc } from './calc';\nimport { Communication } from './communication';\nimport { Document } from './document';\nimport { Infotrack } from './infotrack';\nimport { LawConnect } from './lawconnect';\nimport { Matter } from './matter';\nimport { MsTeams } from './msteams';\nimport { Register } from './register';\nimport { Schema } from './schema';\nimport { System } from './system';\nimport { Card } from './card';\nimport { Staff } from './staff';\nimport { Person } from './person';\n\nimport { Base64 } from 'js-base64';\n\nexport class BrowserFourdApi extends BaseApi {\n  private _accounting: accounting.Api;\n  private _app: app.Api;\n  private _calc: calc.Api;\n  private _communication: communication.Api;\n  private _document: document.Api;\n  private _infotrack: infotrack.Api;\n  private _lawconnect: lawconnect.Api;\n  private _person: person.Api;\n  private _matter: matter.Api;\n  private _msteams: msteams.Api;\n  private _register: register.Api;\n  private _schema: schema.Api;\n  private _system: system.Api;\n  private _card: card.Api;\n  private _staff: staff.Api;\n\n  get accounting(): accounting.Api {\n    return this._accounting;\n  }\n  get app(): app.Api {\n    return this._app;\n  }\n  get calc(): calc.Api {\n    return this._calc;\n  }\n  get card(): card.Api {\n    return this._card;\n  }\n  get communication(): communication.Api {\n    return this._communication;\n  }\n  get document(): document.Api {\n    return this._document;\n  }\n  get infotrack(): infotrack.Api {\n    return this._infotrack;\n  }\n  get lawconnect(): lawconnect.Api {\n    return this._lawconnect;\n  }\n  get matter(): matter.Api {\n    return this._matter;\n  }\n  get msteams(): msteams.Api {\n    return this._msteams;\n  }\n  get person(): person.Api {\n    return this._person;\n  }\n  get register(): register.Api {\n    return this._register;\n  }\n  get schema(): schema.Api {\n    return this._schema;\n  }\n  get system(): system.Api {\n    return this._system;\n  }\n  get staff(): staff.Api {\n    return this._staff;\n  }\n  readonly protocol: string = 'Fourd://';\n\n  constructor(requestContext: RequestContext = undefined) {\n    super(requestContext);\n\n    this._accounting = new Accounting(this);\n    this._app = new App(this);\n    this._calc = new Calc(this);\n    this._communication = new Communication(this);\n    this._document = new Document(this);\n    this._infotrack = new Infotrack(this);\n    this._lawconnect = new LawConnect(this);\n    this._person = new Person(this);\n    this._matter = new Matter(this);\n    this._msteams = new MsTeams(this);\n    this._register = new Register(this);\n    this._schema = new Schema(this);\n    this._system = new System(this);\n    this._card = new Card(this);\n    this._staff = new Staff(this);\n\n    this.setupHostMessageEventHandler();\n  }\n\n  protected retrieveContext(): void {\n    this.call4Dv2('RetrieveLeapAppContext', {}, this.leapContext.hostInfo.appSessionId);\n  }\n\n  to4DJSONString(value: any, encode?: boolean): string {\n    if (encode === undefined) {\n      return 'json=' + Base64.encode(JSON.stringify(value));\n    } else {\n      return JSON.stringify(value);\n    }\n  }\n\n  call4D(request: string): void {\n    if (!window['$4d']) {\n      //this object is lost when the permission acceptance page pops up\n      //so we need to handle it in the old way\n      request = this.protocol + request;\n      window.location.assign(request);\n    } else {\n      request = this.protocol + request;\n      window['$4d'].WebArea_RequestHandler(request);\n    }\n  }\n\n  call4Dv2(command: string, request?: any, requestId?: string): void {\n    if (request === undefined || typeof request === 'object') {\n      // Always append appSessionId to the request sent to Host for validation\n      request = {\n        ...(request || {}),\n        appSessionId: this.leapContext.hostInfo.appSessionId,\n      };\n      if (requestId) {\n        request = { ...request, requestId };\n      }\n    }\n\n    const obj = {\n      command,\n      request,\n      sdkVersion: 2,\n    };\n    this.call4D(this.to4DJSONString(obj));\n  }\n\n  protected hostRelatedSetup(): void {}\n\n  private setupHostMessageEventHandler() {\n    const global = window as any;\n    global.handleHostMessage = (command: string, payload?: string) => super.handleCommand(command, payload);\n  }\n}\n","const whitelistDomains = {\n  dev_au: ['https://dev.leap365.com.au', 'https://dev.leapjd.com.au/'],\n  test_au: [\n    'https://test.leap365.com.au',\n    'https://test-epic1.leap365.com.au',\n    'https://reporting-test.leapaws.com.au',\n    'https://reporting-dev.leapaws.com.au',\n    'https://leapcalc-renderer-au-test.leap.services',\n    'https://test.leapjd.com.au',\n    'https://test.leapjd.co.nz',\n  ],\n\n  live_au: [\n    'https://staging.leap365.com.au',\n    'https://sandbox.leap365.com.au',\n    'https://app.leap365.com.au',\n    'https://reporting.leapaws.com.au',\n    'https://leapcalc-renderer-au-live.leap.services',\n  ],\n\n  liveb_au: ['https://staging.liveb.leap365.com.au', 'https://liveb.leap365.com.au'],\n\n  test_uk: [\n    'https://test.leap365.co.uk',\n    'https://reporting-test.leapaws.co.uk',\n    'https://leapcalc-renderer-uk-test.leap.services',\n    'https://test.leapjd.co.uk',\n  ],\n\n  live_uk: [\n    'https://app.leap365.co.uk',\n    'https://staging.leap365.co.uk',\n    'https://sandbox.leap365.co.uk',\n    'https://reporting.leapaws.co.uk',\n    'https://leapcalc-renderer-uk-live.leap.services',\n  ],\n\n  test_us: [\n    'https://test.leap365.com',\n    'https://reporting-test.leapaws.com',\n    'https://leapcalc-renderer-us-test.leap.services',\n    'https://test.leapjd.com',\n  ],\n\n  live_us: [\n    'https://app.leap365.com',\n    'https://staging.leap365.com',\n    'https://sandbox.leap365.com',\n    'https://reporting.leapaws.com',\n    'https://leapcalc-renderer-us-live.leap.services',\n  ],\n\n  test_ca: [\n    'https://test.leap365.ca',\n    'https://reporting.test.leapaws.ca',\n    'https://renderer.test.ca.leap.services',\n    'https://test.leapjd.ca',\n  ],\n\n  live_ca: [\n    'https://app.leap365.ca',\n    'https://staging.leap365.ca',\n    'https://sandbox.leap365.ca',\n    'https://reporting.leapaws.ca',\n    'https://renderer.ca.leap.services',\n  ],\n};\n\nconst devDomains = [\n  'http://localhost:53504', // local url for reporting\n  'http://localhost:8080', // local url for leap web\n  'http://localhost:9005', // local url for tester app\n];\n\nconst leapHostTestAppDomain = 'https://leaphost.test.leap365.com.au';\n\nconst jd = 'http://my.leapjd';\n\nexport { whitelistDomains, devDomains, leapHostTestAppDomain, jd };\n","import { accounting } from '../../api/accounting';\nimport { IframeWindow } from '.';\n\nexport class Accounting implements accounting.Api {\n  constructor(private iframe: IframeWindow) {}\n\n  createTimeEntry(request: accounting.CreateTimeEntryRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.createTimeEntry',\n      args: request,\n    });\n  }\n\n  createFeeEntry(request: accounting.CreateFeeEntryRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.createFeeEntry',\n      args: request,\n    });\n  }\n\n  createCostRecovery(request: accounting.CreateCostRecoveryEntryRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.createCostRecovery',\n      args: request,\n    });\n  }\n\n  createInvoice(request: accounting.CreateInvoiceRequest): Promise<boolean> {\n    return this.iframe.twoWayCall<accounting.CreateInvoiceRequest, boolean>(\n      request,\n      (requestId, request) => {\n        this.iframe.postMessage({\n          command: 'accounting.createInvoice',\n          args: {\n            ...request,\n            requestId,\n          },\n        });\n      },\n      (response) => {\n        return response;\n      }\n    );\n  }\n\n  createOfficeReceipt(request: accounting.CreateOfficeReceiptRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.createOfficeReceipt',\n      args: request,\n    });\n  }\n\n  createOfficePayment(request: accounting.CreateOfficePaymentRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.createOfficePayment',\n      args: request,\n    });\n  }\n\n  createOfficeJournal(request: accounting.CreateOfficeJournalRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.createOfficeJournal',\n      args: request,\n    });\n  }\n\n  createTrustReceipt(request: accounting.CreateTrustReceiptRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.createTrustReceipt',\n      args: request,\n    });\n  }\n\n  createTrustPayment(request: accounting.CreateTrustPaymentRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.createTrustPayment',\n      args: request,\n    });\n  }\n\n  createTrustJournal(request: accounting.CreateTrustJournalRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.createTrustJournal',\n      args: request,\n    });\n  }\n\n  createTrustToOffice(request: accounting.CreateTrustToOfficeRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.createTrustToOffice',\n      args: request,\n    });\n  }\n  createOfficePaymentRequest(request: accounting.CreateNewOfficePaymentRequestRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.createOfficePaymentRequest',\n      args: request,\n    });\n  }\n  createTrustPaymentRequest(request: accounting.CreateNewTrustPaymentRequestRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.createTrustPaymentRequest',\n      args: request,\n    });\n  }\n\n  reloadFinancialSummary(request: accounting.ReloadFinancialSummaryRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.reloadFinancialSummary',\n      args: request,\n    });\n  }\n\n  reloadTimeFeeList(request: accounting.ReloadTimeFeeListRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.reloadTimeFeeList',\n      args: request,\n    });\n  }\n\n  reloadOfficeLedger(request: accounting.ReloadOfficeLedgerRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.reloadOfficeLedger',\n      args: request,\n    });\n  }\n\n  reloadAnticipatedPaymentList(request: accounting.ReloadAnticipatedPaymentListRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.reloadAnticipatedPaymentList',\n      args: request,\n    });\n  }\n\n  reloadCostRecoveryList(request: accounting.ReloadCostRecoveryListRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.reloadCostRecoveryList',\n      args: request,\n    });\n  }\n\n  reloadTrustLedger(request: accounting.ReloadTrustLedgerRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.reloadTrustLedger',\n      args: request,\n    });\n  }\n\n  reloadControlledMoneyList(request: accounting.ReloadControlledMoneyListRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.reloadControlledMoneyList',\n      args: request,\n    });\n  }\n\n  reloadPowerMoneyList(request: accounting.ReloadPowerMoneyListRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.reloadPowerMoneyList',\n      args: request,\n    });\n  }\n\n  reloadTransitMoneyList(request: accounting.ReloadTransitMoneyListRequest): void {\n    this.iframe.postMessage({\n      command: 'accounting.reloadTransitMoneyList',\n      args: request,\n    });\n  }\n\n  openFee(request: accounting.OpenFeeRequest): void {\n    if (request.isAutoTime) request.timed = true;\n\n    this.iframe.postMessage({\n      command: 'accounting.openFee',\n      args: request,\n    });\n  }\n}\n","import { app } from '../../api/app';\nimport { IframeWindow } from '.';\n\nexport class App implements app.Api {\n  constructor(private iframe: IframeWindow) {}\n\n  openApp(request: app.OpenAppRequest): void {\n    this.iframe.postMessage({\n      command: 'app.openApp',\n      args: request,\n    });\n  }\n}\n","import { calc } from '../../api/calc';\nimport { IframeWindow } from './index';\n\nexport class Calc implements calc.Api {\n  constructor(private iframe: IframeWindow) {}\n\n  evaluatePaths(request: calc.EvaluatePathsRequest): Promise<calc.PathResult[]> {\n    return this.iframe.twoWayCall<calc.EvaluatePathsRequest, calc.PathResult[]>(\n      request,\n      (requestId, request) => {\n        this.iframe.postMessage({\n          command: 'calc.evaluatePaths',\n          args: {\n            ...request,\n            requestId,\n          },\n        });\n      },\n      (response) => {\n        let responseData;\n        try {\n          responseData = JSON.parse(response);\n        } catch (e) {\n          // Unable to parse response => response is not a stringify object\n          responseData = response;\n        }\n        return responseData;\n      }\n    );\n  }\n}\n","import { communication } from '../../api/communication';\nimport { IframeWindow } from '.';\n\nexport class Communication implements communication.Api {\n  constructor(private iframe: IframeWindow) {}\n\n  composeEmail(request: communication.CreateEmailRequest): void {\n    this.iframe.postMessage({\n      command: 'communication.composeEmail',\n      args: request,\n    });\n  }\n\n  createAppointment(request: communication.CreateAppointmentRequest): void {\n    this.iframe.postMessage({\n      command: 'communication.createAppointment',\n      args: request,\n    });\n  }\n\n  createTask(request: communication.CreateTaskRequest): void {\n    this.iframe.postMessage({\n      command: 'communication.createTask',\n      args: request,\n    });\n  }\n}\n","import { document } from '../../api/document';\nimport { IframeWindow } from '.';\n\nexport class Document implements document.Api {\n  constructor(private iframe: IframeWindow) {}\n\n  previewDocument(request: document.PreviewDocumentRequest): void {\n    this.iframe.postMessage({\n      command: 'document.previewDocument',\n      args: request,\n    });\n  }\n\n  previewPrecedent(request: document.PreviewPrecedentRequest): void {\n    this.iframe.postMessage({\n      command: 'document.previewPrecedent',\n      args: request,\n    });\n  }\n\n  createDocumentFromContainer(request: document.CreateDocumentFromContainerRequest): void {\n    this.iframe.postMessage({\n      command: 'document.createDocumentFromContainer',\n      args: request,\n    });\n  }\n\n  createDocumentFromPrecedent(request: document.CreateDocumentFromPrecedentRequest): void {\n    this.iframe.postMessage({\n      command: 'document.createDocumentFromPrecedent',\n      args: request,\n    });\n  }\n\n  openDocument(request: document.OpenDocumentRequest): void {\n    this.iframe.postMessage({\n      command: 'document.openDocument',\n      args: request,\n    });\n  }\n\n  reloadDocumentList(request: document.ReloadDocumentListRequest): void {\n    this.iframe.postMessage({\n      command: 'document.reloadDocumentList',\n      args: request,\n    });\n  }\n\n  editPrecedent(request: document.EditPrecedentRequest): void {\n    this.iframe.postMessage({\n      command: 'document.editPrecedent',\n      args: request,\n    });\n  }\n\n  selectPrecedent(request: document.SelectPrecedentRequest): Promise<document.SelectPrecedentResponse> {\n    return this.iframe.twoWayCall<document.SelectPrecedentRequest, document.SelectPrecedentResponse>(\n      request,\n      (requestId, request) => {\n        this.iframe.postMessage({\n          command: 'document.selectPrecedent',\n          args: {\n            ...request,\n            requestId,\n          },\n        });\n      },\n      (response) => response\n    );\n  }\n}\n","import { infotrack } from '../../api/infotrack';\nimport { IframeWindow } from '.';\n\nexport class Infotrack implements infotrack.Api {\n  constructor(private iframe: IframeWindow) {}\n\n  orderSearch(request: infotrack.CreateSearchRequest): void {\n    this.iframe.postMessage({\n      command: 'infotrack.orderSearch',\n      args: request,\n    });\n  }\n}\n","import { lawconnect } from '../../api/lawconnect';\nimport { IframeWindow } from '.';\n\nexport class LawConnect implements lawconnect.Api {\n  constructor(private iframe: IframeWindow) {}\n\n  shareDocuments(request: lawconnect.ShareDocumentsRequest): void {\n    this.iframe.postMessage({\n      command: 'lawconnect.shareDocuments',\n      args: request,\n    });\n  }\n\n  shareFolder(request: lawconnect.ShareFolderRequest): void {\n    this.iframe.postMessage({\n      command: 'lawconnect.shareFolder',\n      args: request,\n    });\n  }\n\n  shareOfficeStatement(request: lawconnect.ShareOfficeStatementRequest): void {\n    this.iframe.postMessage({\n      command: 'lawconnect.shareOfficeStatement',\n      args: request,\n    });\n  }\n\n  shareTrustStatement(request: lawconnect.ShareTrustStatementRequest): void {\n    this.iframe.postMessage({\n      command: 'lawconnect.shareTrustStatement',\n      args: request,\n    });\n  }\n}\n","import { matter } from '../../api/matter';\nimport { IframeWindow } from '.';\nimport { BaseRequest } from 'api';\n\nexport class Matter implements matter.Api {\n  constructor(private iframe: IframeWindow) {}\n\n  openTable(request: matter.OpenTableRequest): void {\n    this.iframe.postMessage({\n      command: 'matter.openTable',\n      args: request,\n    });\n  }\n\n  openMatter(request: matter.OpenMatterRequest): void {\n    this.iframe.postMessage({\n      command: 'matter.openMatter',\n      args: request,\n    });\n  }\n\n  selectMatter(request?: matter.SelectMatterRequest): Promise<matter.Matter[]> {\n    return this.iframe.twoWayCall<BaseRequest, matter.Matter[]>(\n      request,\n      (requestId, request) => {\n        this.iframe.postMessage({\n          command: 'matter.selectMatter',\n          args: {\n            ...request,\n            requestId,\n          },\n        });\n      },\n      (response) => {\n        return response;\n      }\n    );\n  }\n\n  // getLists(request: BaseRequest): Promise<matter.MatterResult[]> {\n  //   return this.iframe.twoWayCall<BaseRequest, matter.MatterResult[]>(\n  //     request,\n  //     (requestId, request) => {\n  //       this.iframe.postMessage({\n  //         command: 'matter.getLists',\n  //         args: {\n  //           ...request,\n  //           requestId,\n  //         },\n  //       });\n  //     },\n  //     (response) => {\n  //       let responseData;\n  //       try {\n  //         responseData = JSON.parse(response);\n  //       } catch (e) {\n  //         // Unable to parse response => response is not a stringify object\n  //         responseData = response;\n  //       }\n  //       return responseData;\n  //     }\n  //   );\n  // }\n}\n","import { msteams } from '../../api/msteams';\nimport { IframeWindow } from '.';\n\nexport class MsTeams implements msteams.Api {\n  constructor(private iframe: IframeWindow) {}\n\n  shareDocument(request: msteams.ShareDocumentRequest): void {\n    this.iframe.postMessage({\n      command: 'msteams.shareDocument',\n      args: request,\n    });\n  }\n\n  shareMatter(request: msteams.ShareMatterRequest): void {\n    this.iframe.postMessage({\n      command: 'msteams.shareMatter',\n      args: request,\n    });\n  }\n\n  requestCallback(request: msteams.RequestCallbackRequest): void {\n    this.iframe.postMessage({\n      command: 'msteams.requestCallback',\n      args: request,\n    });\n  }\n}\n","import { card } from '../../api/card';\nimport { IframeWindow } from '.';\nimport { BaseRequest } from 'api';\n\nexport class Card implements card.Api {\n  constructor(private iframe: IframeWindow) {}\n\n  selectCard(request?: card.SelectCardRequest): Promise<card.Card[]> {\n    return this.iframe.twoWayCall<card.SelectCardRequest, card.Card[]>(\n      request,\n      (requestId, request) => {\n        this.iframe.postMessage({\n          command: 'card.selectCard',\n          args: {\n            ...request,\n            requestId,\n          },\n        });\n      },\n      (response) => {\n        let responseData;\n        try {\n          responseData = JSON.parse(response);\n        } catch (e) {\n          // Unable to parse response => response is not a stringify object\n          responseData = response;\n        }\n        return responseData;\n      }\n    );\n  }\n\n  createCard(): Promise<card.CreatedCard> {\n    return this.iframe.twoWayCall<any, card.CreatedCard>(\n      null,\n      (requestId, request) => {\n        this.iframe.postMessage({\n          command: 'card.createCard',\n          args: {\n            ...request,\n            requestId,\n          },\n        });\n      },\n      (response) => {\n        let responseData;\n        try {\n          responseData = JSON.parse(response);\n        } catch (e) {\n          // Unable to parse response => response is not a stringify object\n          responseData = response;\n        }\n        return responseData;\n      }\n    );\n  }\n\n  openCard(request: card.OpenCardRequest): void {\n    this.iframe.postMessage({\n      command: 'card.openCard',\n      args: request,\n    });\n  }\n\n  //   getLists(request: BaseRequest): Promise<card.Card[]> {\n  //     return this.iframe.twoWayCall<BaseRequest, card.Card[]>(\n  //       request,\n  //       (requestId, request) => {\n  //         this.iframe.postMessage({\n  //           command: 'card.getLists',\n  //           args: {\n  //             ...request,\n  //             requestId,\n  //           },\n  //         });\n  //       },\n  //       (response) => {\n  //         let responseData;\n  //         try {\n  //           responseData = JSON.parse(response);\n  //         } catch (e) {\n  //           // Unable to parse response => response is not a stringify object\n  //           responseData = response;\n  //         }\n  //         return responseData;\n  //       }\n  //     );\n  //   }\n}\n","import { staff } from '../../api/staff';\nimport { IframeWindow } from '.';\nimport { BaseRequest } from 'api';\n\nexport class Staff implements staff.Api {\n  constructor(private iframe: IframeWindow) {}\n\n  selectStaff(request?: staff.SelectStaffRequest): Promise<staff.Staff[]> {\n    return this.iframe.twoWayCall<BaseRequest, staff.Staff[]>(\n      request,\n      (requestId, request) => {\n        this.iframe.postMessage({\n          command: 'staff.selectStaff',\n          args: {\n            ...request,\n            requestId,\n          },\n        });\n      },\n      (response) => {\n        return response;\n      }\n    );\n  }\n\n  //   getLists(request: BaseRequest): Promise<staff.Staff[]> {\n  //     return this.iframe.twoWayCall<BaseRequest, staff.Staff[]>(\n  //       request,\n  //       (requestId, request) => {\n  //         this.iframe.postMessage({\n  //           command: 'staff.getLists',\n  //           args: {\n  //             ...request,\n  //             requestId,\n  //           },\n  //         });\n  //       },\n  //       (response) => {\n  //         let responseData;\n  //         try {\n  //           responseData = JSON.parse(response);\n  //         } catch (e) {\n  //           // Unable to parse response => response is not a stringify object\n  //           responseData = response;\n  //         }\n  //         return responseData;\n  //       }\n  //     );\n  //   }\n}\n","import { register } from '../../api/register';\nimport { IframeWindow } from '.';\n\nexport class Register implements register.Api {\n  constructor(private iframe: IframeWindow) {}\n\n  reloadDocumentRegisterList(request: register.ReloadDocumentRegisterListRequest): void {\n    this.iframe.postMessage({\n      command: 'register.reloadDocumentRegisterList',\n      args: request,\n    });\n  }\n  reloadPowerEstateList(request: register.ReloadPowerEstateListRequest): void {\n    this.iframe.postMessage({\n      command: 'register.reloadPowerEstateList',\n      args: request,\n    });\n  }\n}\n","import { IframeWindow } from '.';\nimport { schema } from '../../api/schema';\n\nexport class Schema implements schema.Api {\n  constructor(private iframe: IframeWindow) {}\n\n  customiseList(request: schema.CustomiseListRequest): Promise<schema.CustomiseListResponse> {\n    return this.iframe.twoWayCall<schema.CustomiseListRequest, schema.CustomiseListResponse>(\n      request,\n      (requestId, request) => {\n        this.iframe.postMessage({\n          command: 'schema.customiseList',\n          args: {\n            ...request,\n            requestId,\n          },\n        });\n      },\n      (response) => {\n        return response;\n      }\n    );\n  }\n\n  getLists(request: schema.GetListsRequest): Promise<schema.SchemaResponse<schema.SchemaList[]>> {\n    return this.iframe.twoWayCall<schema.GetListsRequest, schema.SchemaResponse<schema.SchemaList[]>>(\n      request,\n      (requestId, request) => {\n        this.iframe.postMessage({\n          command: 'schema.getLists',\n          args: {\n            ...request,\n            requestId,\n          },\n        });\n      },\n      (response) => {\n        return response;\n      }\n    );\n  }\n}\n","import { system } from '../../api/system';\nimport { BaseRequest } from '../../api';\nimport { IframeWindow } from '.';\n\nexport class System implements system.Api {\n  private _systemInfo: system.SystemInfo;\n\n  constructor(private iframe: IframeWindow) {}\n\n  openTwitter(request: BaseRequest): void {\n    throw new Error('Not supported');\n  }\n\n  close(): void {\n    this.iframe.postMessage({ command: 'system.close' });\n  }\n\n  hide(): void {\n    this.iframe.postMessage({ command: 'system.hide' });\n  }\n\n  wait(request?: system.MessageRequest): void {\n    this.iframe.postMessage({ command: 'system.wait', args: request });\n  }\n\n  resume(): void {\n    this.iframe.postMessage({ command: 'system.resume' });\n  }\n\n  cancelClose(): void {\n    this.iframe.postMessage({ command: 'system.cancelClose' });\n  }\n\n  alert(request: system.MessageRequest): void {\n    this.iframe.postMessage({ command: 'system.alert', args: request });\n  }\n\n  error(request: system.MessageRequest): void {\n    this.iframe.postMessage({ command: 'system.error', args: request });\n  }\n\n  openDialog(request: system.DialogRequest): Promise<boolean> {\n    return this.iframe.twoWayCall<system.DialogRequest, boolean>(\n      request,\n      (requestId, request) => {\n        this.iframe.postMessage({\n          command: 'system.openDialog',\n          args: {\n            ...request,\n            requestId,\n          },\n        });\n      },\n      (response) => {\n        return response;\n      }\n    );\n  }\n\n  openUrl(config: system.BrowserConfig): void {\n    this.iframe.postMessage({ command: 'system.openUrl', args: config });\n  }\n\n  getSystemInfo(): Promise<system.SystemInfo> {\n    if (this._systemInfo) {\n      return Promise.resolve(this._systemInfo);\n    }\n    return this.iframe.twoWayCall<system.SystemInfo, system.SystemInfo>(\n      null,\n      (requestId) => {\n        this.iframe.postMessage({\n          command: 'system.getSystemInfo',\n          args: { requestId },\n        });\n      },\n      (response) => {\n        this._systemInfo = response;\n        return response;\n      }\n    );\n  }\n\n  setWindowTitle(request: system.SetWindowTitleRequest): void {\n    this.iframe.postMessage({ command: 'system.setWindowTitle', args: request });\n  }\n\n  onBeforeClose(handler: () => Promise<boolean>): void {\n    handler().then((shouldCancelClose) => {\n      if (shouldCancelClose) {\n        this.cancelClose();\n      }\n    });\n  }\n\n  send(request: any, hasResponse: boolean = false): Promise<any> {\n    if (!this.iframe.isTrustedApp) {\n      throw new Error('Permission error');\n    }\n\n    if (request === null || request === undefined) {\n      throw new Error('Bad request');\n    }\n\n    const isObject = typeof request === 'object';\n\n    if (isObject && hasResponse) {\n      return this.iframe.twoWayCall<any, any>(\n        request,\n        (requestId, request) => {\n          this.iframe.postMessage({\n            command: 'system.send',\n            args: { ...request, requestId },\n          });\n        },\n        (response) => {\n          return response;\n        }\n      );\n    } else {\n      this.iframe.postMessage({ command: 'system.send', args: request });\n      return Promise.resolve();\n    }\n  }\n\n  finishLoading(): void {\n    this.iframe.postMessage({ command: 'system.finishLoading' });\n  }\n}\n","import { person } from '../../api/person';\nimport { IframeWindow } from '.';\nimport { BaseRequest } from 'api';\n\nexport class Person implements person.Api {\n  constructor(private iframe: IframeWindow) {}\n\n  selectPerson(request?: person.SelectPersonRequest): Promise<person.Person[]> {\n    return this.iframe.twoWayCall<person.SelectPersonRequest, person.Person[]>(\n      request,\n      (requestId, request) => {\n        this.iframe.postMessage({\n          command: 'person.selectPerson',\n          args: {\n            ...request,\n            requestId,\n          },\n        });\n      },\n      (response) => {\n        let responseData;\n        try {\n          responseData = JSON.parse(response);\n        } catch (e) {\n          // Unable to parse response => response is not a stringify object\n          responseData = response;\n        }\n        return responseData;\n      }\n    );\n  }\n\n  openPerson(request: person.OpenPersonRequest): void {\n    this.iframe.postMessage({\n      command: 'person.openPerson',\n      args: request,\n    });\n  }\n\n  //   getLists(request: BaseRequest): Promise<person.Person[]> {\n  //     return this.iframe.twoWayCall<BaseRequest, person.Person[]>(\n  //       request,\n  //       (requestId, request) => {\n  //         this.iframe.postMessage({\n  //           command: 'person.getLists',\n  //           args: {\n  //             ...request,\n  //             requestId,\n  //           },\n  //         });\n  //       },\n  //       (response) => {\n  //         let responseData;\n  //         try {\n  //           responseData = JSON.parse(response);\n  //         } catch (e) {\n  //           // Unable to parse response => response is not a stringify object\n  //           responseData = response;\n  //         }\n  //         return responseData;\n  //       }\n  //     );\n  //   }\n}\n","import { whitelistDomains, devDomains, leapHostTestAppDomain, jd } from './config/whitelistdomain';\nimport { BaseApi } from '../base-impl';\nimport { RequestContext } from '../../api';\nimport { accounting } from '../../api/accounting';\nimport { app } from '../../api/app';\nimport { calc } from '../../api/calc';\nimport { communication } from '../../api/communication';\nimport { document } from '../../api/document';\nimport { infotrack } from '../../api/infotrack';\nimport { lawconnect } from '../../api/lawconnect';\nimport { matter } from '../../api/matter';\nimport { msteams } from '../../api/msteams';\nimport { staff } from '../../api/staff';\nimport { card } from '../../api/card';\nimport { register } from '../../api/register';\nimport { schema } from '../../api/schema';\nimport { system } from '../../api/system';\nimport { person } from '../../api/person';\n\nimport { Accounting } from './accounting';\nimport { App } from './app';\nimport { Calc } from './calc';\nimport { Communication } from './communication';\nimport { Document } from './document';\nimport { Infotrack } from './infotrack';\nimport { LawConnect } from './lawconnect';\nimport { Matter } from './matter';\nimport { MsTeams } from './msteams';\nimport { Card } from './card';\nimport { Staff } from './staff';\nimport { Register } from './register';\nimport { Schema } from './schema';\nimport { System } from './system';\nimport { Person } from './person';\n\nexport class IframeWindow extends BaseApi {\n  private _whiteListedHostDomains: string[];\n\n  private _accounting: accounting.Api;\n  private _app: app.Api;\n  private _calc: calc.Api;\n  private _communication: communication.Api;\n  private _document: document.Api;\n  private _infotrack: infotrack.Api;\n  private _lawconnect: lawconnect.Api;\n  private _matter: matter.Api;\n  private _msteams: msteams.Api;\n  private _card: card.Api;\n  private _staff: staff.Api;\n  private _register: register.Api;\n  private _person: person.Api;\n  private _schema: schema.Api;\n  private _system: system.Api;\n\n  get accounting(): accounting.Api {\n    return this._accounting;\n  }\n  get app(): app.Api {\n    return this._app;\n  }\n  get calc(): calc.Api {\n    return this._calc;\n  }\n  get card(): card.Api {\n    return this._card;\n  }\n  get communication(): communication.Api {\n    return this._communication;\n  }\n  get document(): document.Api {\n    return this._document;\n  }\n  get infotrack(): infotrack.Api {\n    return this._infotrack;\n  }\n  get lawconnect(): lawconnect.Api {\n    return this._lawconnect;\n  }\n  get matter(): matter.Api {\n    return this._matter;\n  }\n  get msteams(): msteams.Api {\n    return this._msteams;\n  }\n  get staff(): staff.Api {\n    return this._staff;\n  }\n  get person(): person.Api {\n    return this._person;\n  }\n  get register(): register.Api {\n    return this._register;\n  }\n  get schema(): schema.Api {\n    return this._schema;\n  }\n  get system(): system.Api {\n    return this._system;\n  }\n\n  private parentWindow: Window;\n\n  constructor(requestContext: RequestContext, newTab: boolean = false) {\n    super(requestContext);\n\n    this._accounting = new Accounting(this);\n    this._app = new App(this);\n    this._calc = new Calc(this);\n    this._card = new Card(this);\n    this._communication = new Communication(this);\n    this._document = new Document(this);\n    this._infotrack = new Infotrack(this);\n    this._lawconnect = new LawConnect(this);\n    this._matter = new Matter(this);\n    this._msteams = new MsTeams(this);\n    this._person = new Person(this);\n    this._register = new Register(this);\n    this._schema = new Schema(this);\n    this._staff = new Staff(this);\n    this._system = new System(this);\n\n    this.parentWindow = newTab ? window.opener : window.parent;\n    this.registerMessageEventListener();\n  }\n\n  protected retrieveContext(): void {\n    this.postMessage({\n      command: 'RetrieveLeapAppContext',\n      args: {\n        requestId: this.leapContext.hostInfo.appSessionId,\n      },\n    });\n  }\n\n  protected hostRelatedSetup(): void {\n    if (this.leapContext.hostInfo.hostType === 'web') {\n      this._whiteListedHostDomains = [\n        ...(whitelistDomains[`${this.leapContext.hostInfo.env}_${this.leapContext.hostInfo.region}`] || []),\n        ...devDomains,\n        leapHostTestAppDomain,\n        jd,\n      ];\n    }\n  }\n\n  postMessage(message: { command: string; args?: any; sdkVersion?: number }): void {\n    // Always append appSessionId to the message args sent to Host for validation\n    message.args = {\n      ...(message.args || {}),\n    };\n\n    if (this.leapContext?.hostInfo?.appSessionId) message.args.appSessionId = this.leapContext.hostInfo?.appSessionId;\n\n    message.sdkVersion = message.sdkVersion ?? 2;\n    this.parentWindow.postMessage(message, '*');\n  }\n\n  private registerMessageEventListener() {\n    window.addEventListener('message', this.receiveMessage.bind(this), false);\n  }\n\n  private receiveMessage(event) {\n    // Origin is not white-listed, ignore message\n    // mobile doesn't have host\n    if (this._whiteListedHostDomains?.length > 0 && !this._whiteListedHostDomains.includes(event.origin)) {\n      return;\n    }\n\n    if (!!event.data.command) {\n      const command: string = event.data.command;\n      if (!!event.data.payload) {\n        super.handleCommand(command, event.data.payload);\n      } else {\n        super.handleCommand(command);\n      }\n    }\n  }\n}\n","import { Api, RequestContext } from '../api';\nimport { BrowserFourdApi } from './desktop';\nimport { IframeWindow } from './web';\nimport { getQueryStringValue } from './util';\n\nexport class LeapHostSdkFactory {\n  static getInstance(): Api {\n    //we only support desktop and IFrame at the moment\n    const requestContext = this.getRequestContext();\n    if (!requestContext) return null;\n    const newTab: boolean = (getQueryStringValue('newTab') || '').toLowerCase() === 'true';\n\n    if (!!window['$4d'] || requestContext.host === 'desktop') return new BrowserFourdApi(requestContext);\n    else return new IframeWindow(requestContext, newTab);\n  }\n\n  private static getRequestContext() {\n    const appSessionId: string = getQueryStringValue('appSessionId');\n    if (!appSessionId) return null;\n\n    const host: string = getQueryStringValue('host') ?? 'desktop';\n    let env: string = getQueryStringValue('env');\n    const region: string = getQueryStringValue('region');\n    const trustedApp: boolean = (getQueryStringValue('trustedApp') || '').toLowerCase() === 'true';\n\n    //backward compatiable with v1 messageBus like \"autest\"\n    if (!!env) {\n      if (env.includes('liveb')) env = 'liveb';\n      else if (env.includes('live')) env = 'live';\n      else if (env.includes('test')) env = 'test';\n      else if (env.includes('dev')) env = 'dev';\n    }\n\n    const requestContext: RequestContext = {\n      appSessionId,\n      host,\n      env,\n      region,\n      trustedApp,\n    };\n\n    return requestContext;\n  }\n}\n\nexport { RequestContext, MatterBasedRequest, LeapContext, HostResponse, BaseRequest, Api } from '../api';\n"],"names":["LeapContext","context","hostInfo","this","HostInfo","appSessionId","hostType","hostVersion","env","region","config","auth","host","dev","au","test","uk","us","ca","live","getQueryStringValue","key","searchInHash","result","undefined","locationSection","window","location","hash","search","length","keyValues","substring","split","i","decodeToken","token","payload","JSON","parse","atob","e","BaseApi","requestContext","registeredCommands","_leapContext","_isTrustedApp","trustedApp","_proto","init","leapAuthClientId","system","close","Promise","resolve","reject","_this","registerHostMessageHandler","leapContext","data","deregisterHostMessageHandler","leapContextObj","Object","keys","matterContext","clientId","isTrustedApp","hostRelatedSetup","_userToken","authtoken","authEnv","includes","AuthAgent","authHost","autoLogin","autoLogout","uniqueSession","scopes","autoRefreshToken","then","accessToken","retrieveContext","getRefreshedAccessToken","send","command","getDecodedRefreshedAccessToken","callback","Error","twoWayCall","request","requestFn","responseFn","requestId","uuidv4","_this6","hostResponse","isSuccess","error","handleCommand","registeredCommand","_createClass","get","Accounting","fourd","createTimeEntry","call4Dv2","createFeeEntry","createCostRecovery","createInvoice","response","createOfficeReceipt","createOfficePayment","createOfficeJournal","createTrustReceipt","createTrustPayment","createTrustJournal","createTrustToOffice","createOfficePaymentRequest","createTrustPaymentRequest","reloadFinancialSummary","reloadTimeFeeList","reloadOfficeLedger","reloadAnticipatedPaymentList","reloadCostRecoveryList","reloadTrustLedger","reloadControlledMoneyList","reloadPowerMoneyList","reloadTransitMoneyList","openFee","isAutoTime","timed","App","openApp","Calc","evaluatePaths","method","url","body","status","message","responseData","Communication","composeEmail","createAppointment","createTask","Document","previewDocument","previewPrecedent","createDocumentFromContainer","createDocumentFromPrecedent","openDocument","reloadDocumentList","editPrecedent","selectPrecedent","Infotrack","orderSearch","LawConnect","shareDocuments","shareFolder","shareOfficeStatement","shareTrustStatement","Matter","openTable","order","openMatter","selectMatter","_this$fourd$leapConte","_this$fourd$leapConte2","map","r","matter","deleted","matterTypeId","MsTeams","shareDocument","shareMatter","requestCallback","Register","reloadDocumentRegisterList","reloadPowerEstateList","Schema","customiseList","getLists","_this2","System","value","String","openTwitter","hide","wait","resume","cancelClose","alert","isString","openDialog","dialogType","openUrl","getSystemInfo","_systemInfo","setWindowTitle","onBeforeClose","handler","shouldCancelClose","_this3","hasResponse","_this5","sendLegacy","hasStatus","hasOwnProperty","hasError","hasData","call4D","to4DJSONString","finishLoading","Card","selectCard","createCard","openCard","Staff","selectStaff","staff","staffId","staffGUID","userId","userGUID","branchId","branchGUID","Person","selectPerson","openPerson","BrowserFourdApi","_accounting","_app","_calc","_communication","_document","_infotrack","_lawconnect","_person","_matter","_msteams","_register","_schema","_system","_card","_staff","setupHostMessageEventHandler","_inheritsLoose","encode","Base64","stringify","protocol","WebArea_RequestHandler","assign","sdkVersion","handleHostMessage","whitelistDomains","dev_au","test_au","live_au","liveb_au","test_uk","live_uk","test_us","live_us","test_ca","live_ca","devDomains","iframe","postMessage","args","_this4","IframeWindow","newTab","parentWindow","opener","parent","registerMessageEventListener","_whiteListedHostDomains","_this$leapContext","_this$leapContext$hos","_this$leapContext$hos2","addEventListener","receiveMessage","bind","event","_this$_whiteListedHos","origin","_BaseApi","LeapHostSdkFactory","getInstance","getRequestContext","toLowerCase"],"mappings":"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"}